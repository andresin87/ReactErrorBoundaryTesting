{"version":3,"sources":["components/Menu.jsx","components/ErrorBoundary.jsx","components/Page.jsx","components/Buggy.jsx","components/NotBuggy.jsx","Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["className","to","ErrorBoundary","state","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","props","children","React","Component","withErrorBoundary","Page","greeting","title","Error","exact","path","render","App","Menu","Routes","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGe,oBACb,6BAASA,UAAU,QACjB,kBAAC,IAAD,CAAMC,GAAG,MAAT,QACC,MACD,kBAAC,IAAD,CAAMA,GAAG,WAAT,SACC,MACD,kBAAC,IAAD,CAAMA,GAAG,eAAT,aACC,MACD,kBAAC,IAAD,CAAMA,GAAG,WAAT,W,mCCTiBC,E,2MACnBC,MAAQ,CAAEC,MAAO,KAAMC,UAAW,M,iFAEhBD,EAAOC,GACvBC,KAAKC,SAAS,CACZH,MAAOA,EACPC,UAAWA,M,+BAKb,OAAIC,KAAKH,MAAME,UAEX,6BACE,qDACA,6BAASG,MAAO,CAAEC,WAAY,aAC3BH,KAAKH,MAAMC,OAASE,KAAKH,MAAMC,MAAMM,WACtC,6BACCJ,KAAKH,MAAME,UAAUM,iBAMvBL,KAAKM,MAAMC,a,GAxBqBC,IAAMC,WA4BpCC,EAAoB,SAAAD,GAAS,OAAI,kBAC5C,kBAAC,EAAD,KACE,kBAACA,EAAD,S,QC7BiBE,E,2MACnBd,MAAQ,CAAEe,SAAU,W,wEACV,IAAD,EACqBZ,KAAKM,MAAzBO,EADD,EACCA,MAAON,EADR,EACQA,SACf,OACE,kBAAC,EAAD,KACE,4BAAKM,GACJN,O,GAPyBC,IAAMC,WCezBC,I,2MAbbb,MAAQ,CAAEe,SAAU,W,mFAElB,MAAM,IAAIE,MAAM,8C,+BAGhB,OACE,oCACE,4BAAKd,KAAKH,MAAMe,e,GARJJ,IAAMC,YCUXC,I,2MAVbb,MAAQ,CAAEe,SAAU,W,wEAElB,OACE,oCACE,4BAAKZ,KAAKH,MAAMe,e,GALDJ,IAAMC,YCId,oBACb,6BAASf,UAAU,QACjB,kBAAC,IAAD,CACEqB,OAAK,EACLC,KAAK,KACLC,OAAQ,kBACN,kBAAC,EAAD,CAAMJ,MAAO,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,UAIN,kBAAC,IAAD,CACEE,OAAK,EACLC,KAAK,UACLC,OAAQ,kBACN,kBAAC,EAAD,CAAMJ,MAAO,SACX,kBAAC,EAAD,UAIJ,kBAAC,IAAD,CACEE,OAAK,EACLC,KAAK,cACLC,OAAQ,kBACN,kBAAC,EAAD,CAAMJ,MAAO,aACX,kBAAC,EAAD,UAIR,kBAAC,IAAD,CACEE,OAAK,EACLC,KAAK,UACLC,OAAQ,kBACN,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,MCnBKC,MAdf,WACE,OACE,yBAAKxB,UAAU,OACb,wDACA,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAACyB,EAAD,MACA,kBAACC,EAAD,UCLUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3101453b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <section className=\"menu\">\n    <Link to=\"./\">Home</Link>\n    {' / '}\n    <Link to=\"./buggy\">buggy</Link>\n    {' / '}\n    <Link to=\"./not-buggy\">not-buggy</Link>\n    {' / '}\n    <Link to=\"./page1\">page1</Link>\n  </section>\n);","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component {\n  state = { error: null, errorInfo: null };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n};\n\nexport const withErrorBoundary = Component => () => (\n  <ErrorBoundary>\n    <Component />\n  </ErrorBoundary>\n);\n","import React from 'react';\nimport ErrorBoundary from './ErrorBoundary';\n\nexport default class Page extends React.Component {\n  state = { greeting: \"Welcome\"};\n  render() {\n    const { title, children } = this.props;\n    return (\n      <ErrorBoundary>\n        <h2>{title}</h2>\n        {children}\n      </ErrorBoundary>\n    );\n  }\n};","import React from 'react';\n\nimport { withErrorBoundary } from './ErrorBoundary';\n\nclass Buggy extends React.Component {\n  state = { greeting: \"Welcome\"};\n  componentDidMount() {\n    throw new Error(\"An error has occured in Buggy component!\");\n  }\n  render() {\n    return (\n      <>\n        <h4>{this.state.greeting}</h4>\n      </>\n    );\n  }\n}\n\nexport default withErrorBoundary(Buggy);","import React from 'react';\nimport { withErrorBoundary } from './ErrorBoundary';\n\nclass NotBuggy extends React.Component {\n  state = { greeting: \"Welcome\"};\n  render() {\n    return (\n      <>\n        <h4>{this.state.greeting}</h4>\n      </>\n    );\n  }\n};\n\nexport default withErrorBoundary(NotBuggy);","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Page from './components/Page';\nimport Buggy from './components/Buggy';\nimport NotBuggy from './components/NotBuggy';\n\nexport default () => (\n  <section className=\"page\">\n    <Route\n      exact\n      path=\"./\"\n      render={() => (\n        <Page title={'home'}>\n          <Buggy/>\n          <NotBuggy/>\n        </Page>\n      )}\n    />\n    <Route\n      exact\n      path=\"./buggy\"\n      render={() => (\n        <Page title={'buggy'}>\n          <Buggy/>\n        </Page>\n      )}\n    />\n      <Route\n        exact\n        path=\"./not-buggy\"\n        render={() => (\n          <Page title={'not-buggy'}>\n            <NotBuggy/>\n          </Page>\n        )}\n      />\n    <Route\n      exact\n      path=\"./page1\"\n      render={() => (\n        <>\n          <Buggy/>\n          <NotBuggy/>\n        </>\n      )}\n    />\n  </section>\n);\n","import React from 'react';\n\nimport Menu from './components/Menu';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Routes from './Routes';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Error Boundaries Example</h2>\n      <BrowserRouter>\n        <ErrorBoundary>\n          <Menu/>\n          <Routes />\n        </ErrorBoundary>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}